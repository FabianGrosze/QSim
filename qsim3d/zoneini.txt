alter.f95:         print*,"alter_ini() für ",alter_nummer,"-te zone mit nummer=",zone(alter_nummer)%zonen_nummer
alter.f95:         write(dateiname,'(4A)')trim(modellverzeichnis),'ganglinien/tracer_zonen_integrale.txt'
alter.f95:            print*,'ganglinien/tracer_zonen_integrale.txt lässt sich nicht öffnen'
alter.f95:         ! Ganglinienausgabe zonenintegrale auf tracer.txt
initialisieren.f95:!! Die Setzung der Startwerte für \ref planktische_variablen wird zonenweise als \ref lokaleParameter vorgenommen.\n
initialisieren.f95:!! Zur Initilisierung werden die Werte aus einer, der jeweiligen Zone zugeordneten Randbedingung verwendet.\n
initialisieren.f95:!!!!! Initilisieren der Zone mit der zugeordneten Randbedingung ini_randnr aus MODELLG.3D.txt
initialisieren.f95:      !! Initialisierungs-Randnummer der Zone, ini_randnr, in Randzähler umwandeln...
initialisieren.f95:      do i=1,zonen_anzahl ! alle i zonen
initialisieren.f95:            !print*,'zone i=',i,' zonen_nummer(i)=',zonen_nummer(i),' zone(i)%ini_randnr=',zone(i)%ini_randnr  &
initialisieren.f95:            if(zone(i)%ini_randnr.eq.rabe(j)%nr_rb)then
initialisieren.f95:                  !print*,"Zuordnung zone(i)%ini_randnr=j ",zone(i)%ini_randnr,"=",j
initialisieren.f95:                  write(fehler,*)' 333 doppelzuornung ini_randnr ### Abbruch',zone(i)%ini_randnr,i,rabe(j)%nr_rb,j
initialisieren.f95:            zone(i)%ini_randnr=nini
initialisieren.f95:            print*,'initialisieren: Zone ',i,' mit Nr. ',zone(i)%zonen_nummer  &
initialisieren.f95:                  ,' wird initialisiert mit Rand ',zone(i)%ini_randnr,' mit Nr.',rabe(zone(i)%ini_randnr)%nr_rb
initialisieren.f95:            write(fehler,*)' 99 Zone ',i,' mit Nr. ',zone(i)%zonen_nummer  &
initialisieren.f95:                  ,' möchte initialisieren mit Rand ', zone(i)%ini_randnr  &
initialisieren.f95:      end do ! alle i zonen
initialisieren.f95:      do i=1,zonen_anzahl ! alle i zonen
initialisieren.f95:         print*,'initialisieren: ini_randnr(',i,')=',zone(i)%ini_randnr
initialisieren.f95:      end do ! alle i zonen
initialisieren.f95:      do i=1,zonen_anzahl ! alle i zonen
initialisieren.f95:         print*,'initialisieren nach ini_algae: ini_randnr(',i,')=',zone(i)%ini_randnr
initialisieren.f95:      end do ! alle i zonen
initialisieren.f95:      do i=1,zonen_anzahl ! alle i zonen
initialisieren.f95:         print*,'initialisieren nach RB_werte_aktualisieren: ini_randnr(',i,')=',zone(i)%ini_randnr
initialisieren.f95:      end do ! alle i zonen
initialisieren.f95:         !   nuzo=knoten_zone(j)
initialisieren.f95:         !   nuzo=element_zone(j)
initialisieren.f95:         !   nuzo=knoten_zone(j)
initialisieren.f95:         nuzo=point_zone(j)
initialisieren.f95:         if((nuzo.le. 0).or.(nuzo.gt. zonen_anzahl))then
initialisieren.f95:            write(fehler,*)'initialisieren: error in zone number: ',point_zone(j),nuzo,' at point ',j
initialisieren.f95:            print*,'vor randwert_planctonic ini_randnr(',nuzo,')=',zone(nuzo)%ini_randnr
initialisieren.f95:            print*,'rabe(',zone(nuzo)%ini_randnr,')%wert_jetzt(22)='  &
initialisieren.f95:                  , rabe(  zone(nuzo)%ini_randnr  )%wert_jetzt(22)
initialisieren.f95:         irn=zone(nuzo)%ini_randnr
initialisieren.f95:!! ausgeschaltet weil durch Anfangsbedingungen aus zonenweise zugeordneter Randbedingung
initialisieren.f95:      ! Dreissena, Muschel Anfangs-Belegung aus Zonenvorgabe
initialisieren.f95:         benthic_distribution(56+(i-1)*number_benth_distr) = zone(point_zone(i))%dreissen%msohle0 ! Dreissenabiomasse pro Fläche Sohle (0. Kohorte) zdreis(1:2,1) = 
initialisieren.f95:         benthic_distribution(57+(i-1)*number_benth_distr) = zone(point_zone(i))%dreissen%msohle1 ! Dreissenabiomasse pro Fläche Sohle (1. Kohorte) zdreis(1:2,2) = 
initialisieren.f95:         benthic_distribution(60+(i-1)*number_benth_distr) = zone(point_zone(i))%dreissen%mboesch0  ! Dreissenabiomasse pro Fläche Böschung (0. Kohorte) zdrei(1:2,1) = 
initialisieren.f95:         benthic_distribution(61+(i-1)*number_benth_distr) = zone(point_zone(i))%dreissen%mboesch1  ! Dreissenabiomasse pro Fläche Böschung (1. Kohorte) zdrei(1:2,2) = 
initialisieren.f95:         benthic_distribution(64+(i-1)*number_benth_distr) = zone(point_zone(i))%dreissen%gewicht0  ! Gewicht einer Dreissena-Muschel (0. Kohorte) gewdr(1:2,1) = 
initialisieren.f95:         benthic_distribution(65+(i-1)*number_benth_distr) = zone(point_zone(i))%dreissen%gewicht1  ! Gewicht einer Dreissena-Muschel (1. Kohorte) gewdr(1:2,2) = 
module_modell.f95:         integer :: nr_zone, ini_randnr, zonen_nummer
planktische_variablen.f95:               point_zone(ini)=knoten_zone(ini)
planktische_variablen.f95:               point_zone(ini)=element_zone(ini)
planktische_variablen.f95:            call qerror('ini_planktkon0: SCHISM zone not yet worked out')
stofftransport_casu.f95:      ! bei casu-Netzen hat der Knoten die Zone, vorsichtshalber wird sie hier auf -7 initialisiert
stofftransport_schism.f95:         do n=1,n_elemente !initialize zones and boundaries
stofftransport_untrim.f95:      do n=1,knotenanzahl2D !initialize zones
zonen.f95:!! Initialisierung für die jeweilige Zone mittels Randbedingung.\n
zonen.f95:!       integer , allocatable , dimension (:) :: wetterstations_nummer, zonen_nummer, schifffahrts_zone, ini_randnr
zonen.f95:         knoten_zone(ini)=0
zonen.f95:         element_zone(ini)=0
zonen.f95:         point_zone(ini)=0
zonen.f95:      call MPI_Bcast(zone%ini_randnr,zonen_anzahl,MPI_INT,0,mpi_komm_welt,ierr)
zonen.f95:!! enthält die Definition der unveränderlichen biologischen u.&nbsp;a. die Güte-Berechnung definierenden Verhältnisse in den Zonen des Modells.
zonen.f95:!! enthält die Definition der unveränderlichen biologischen u.&nbsp;a. die Güte-Berechnung definierenden Verhältnisse in den Zonen des Modells.
zonen.f95:!! <tr><td> I </td><td>Nummer des Randes, der zur <b>Initialisierung </b> dieser Zone dient </td><td> 
zonen.f95:      zone(:)%ini_randnr=0 ! Randnummer mit dem initialisiert wird
zonen.f95:     &      call qerror('Fehler in MODELLG.3D.txt ; jede Zone braucht genau eine Randnr. zur Initialisierung !')
zonen.f95:!! I - Initialisierung für o.g. Zone mittels Randbedingung, Angabe der Randnummer [neu in 3D]\n
zonen.f95:            read(ctext(2:2000), *, iostat = string_read_error ) zone(izoni)%ini_randnr
zonen.f95:                  ,' wird initialisiert von Randbedingung Nr. ',zone(izoni)%ini_randnr
